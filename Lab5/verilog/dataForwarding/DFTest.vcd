$date
	Sat Jun 04 00:06:05 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module df_tb $end
$scope module dut $end
$var wire 1 ! EXMEM_is_alur $end
$var wire 1 " IDEX_is_alur $end
$var wire 1 # IFID_is_alur $end
$var wire 1 $ MEMWB_is_alur $end
$var wire 1 % op_EXMEM_is_alui_rd $end
$var wire 1 & op_EXMEM_is_alui_wr $end
$var wire 1 ' op_IDEX_is_alui_rd $end
$var wire 1 ( op_IDEX_is_alui_wr $end
$var wire 1 ) op_IFID_is_alui_rd $end
$var wire 1 * op_IFID_is_alui_wr $end
$var wire 1 + op_MEMWB_is_alui_rd $end
$var wire 1 , op_MEMWB_is_alui_wr $end
$var wire 5 - rt_MEMWB [4:0] $end
$var wire 5 . rt_IFID [4:0] $end
$var wire 5 / rt_IDEX [4:0] $end
$var wire 5 0 rt_EXMEM [4:0] $end
$var wire 5 1 rs_MEMWB [4:0] $end
$var wire 5 2 rs_IFID [4:0] $end
$var wire 5 3 rs_IDEX [4:0] $end
$var wire 5 4 rs_EXMEM [4:0] $end
$var wire 5 5 rd_MEMWB [4:0] $end
$var wire 5 6 rd_IFID [4:0] $end
$var wire 5 7 rd_IDEX [4:0] $end
$var wire 5 8 rd_EXMEM [4:0] $end
$var wire 6 9 op_MEMWB [5:0] $end
$var wire 6 : op_IFID [5:0] $end
$var wire 6 ; op_IDEX [5:0] $end
$var wire 6 < op_EXMEM [5:0] $end
$var wire 32 = instrMEMWB [31:0] $end
$var wire 32 > instrIFID [31:0] $end
$var wire 32 ? instrIDEX [31:0] $end
$var wire 32 @ instrEXMEM [31:0] $end
$var wire 6 A funct_MEMWB [5:0] $end
$var wire 6 B funct_IFID [5:0] $end
$var wire 6 C funct_IDEX [5:0] $end
$var wire 6 D funct_EXMEM [5:0] $end
$var wire 32 E aluMEMWB_Data [31:0] $end
$var wire 32 F aluEXMEM_Data [31:0] $end
$var wire 32 G MEMWB_MemData [31:0] $end
$var wire 32 H EXMEM_Data2Mem [31:0] $end
$var reg 1 I alu0 $end
$var reg 1 J alu1 $end
$var reg 32 K aluD0 [31:0] $end
$var reg 32 L aluD1 [31:0] $end
$var reg 1 M exmem $end
$var reg 32 N exmemD [31:0] $end
$var reg 1 O flush_ifid $end
$var reg 1 P jmp0 $end
$var reg 32 Q jmp0D [31:0] $end
$var reg 1 R jmp1 $end
$var reg 32 S jmp1D [31:0] $end
$var reg 32 T memMemD [31:0] $end
$var reg 1 U mem_mem $end
$var reg 1 V stall_idex $end
$var reg 1 W stall_ifid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xW
xV
0U
bx T
bx S
0R
bx Q
0P
0O
bx N
xM
bx L
bx K
xJ
xI
bx H
bx G
bx F
bx E
b1 D
b1 C
b1 B
b1 A
bx00000000000000011111000001 @
b11111000001 ?
b11111000001 >
b11111000001 =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
0,
0+
0*
0)
0(
0'
x&
x%
0$
0#
0"
0!
$end
#5
b1000 T
b1000 G
b110 H
b100 E
b10 F
#10
1V
0I
0J
1'
1(
0&
1%
b10101 3
b10101 0
b1000 ;
b100011 <
b100010101000000000011111000001 ?
b10001100000101010000011111000001 @
#12
0V
b1011 3
b100001011000000000011111000001 ?
#14
1"
0'
0(
1V
b10000 2
b10000 7
b10101 /
b10101 3
b100000 C
b0 ;
b10000000000000011111000001 >
b10101101011000011111100000 ?
#16
0V
b0 0
b10001100000000000000011111000001 @
#20
b100 L
b100 K
1&
1%
b1000 <
b100000000000000000011111000001 @
#24
b10 K
1'
1(
0"
1O
1W
b10 S
b10 Q
1R
b10101 2
b1000 ;
b1000 B
b100010101101011000011111100000 ?
b10101000000000011111001000 >
#26
0W
b1011 2
b1011000000000011111001000 >
#28
1#
0O
0R
b100000 B
b1011000000000011111100000 >
#30
0#
1O
1R
b111 :
b11101011000000000011111100000 >
#32
1)
1*
0O
0R
b1000 :
b100001011000000000011111100000 >
#34
0)
0*
1O
b10 :
b1001011000000000011111100000 >
#38
