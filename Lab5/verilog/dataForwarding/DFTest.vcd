$date
	Thu Jun 02 20:32:53 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module df_tb $end
$scope module dut $end
$var wire 1 ! funct_EXMEM_is_alur $end
$var wire 1 " funct_IDEX_is_alur $end
$var wire 1 # funct_IFID_is_alur $end
$var wire 1 $ funct_MEMWB_is_alur $end
$var wire 1 % op_EXMEM_is_alui_rd $end
$var wire 1 & op_EXMEM_is_alui_wr $end
$var wire 1 ' op_EXMEM_is_alur $end
$var wire 1 ( op_IDEX_is_alui_rd $end
$var wire 1 ) op_IDEX_is_alui_wr $end
$var wire 1 * op_IDEX_is_alur $end
$var wire 1 + op_IFID_is_alui_rd $end
$var wire 1 , op_IFID_is_alui_wr $end
$var wire 1 - op_IFID_is_alur $end
$var wire 1 . op_MEMWB_is_alui_rd $end
$var wire 1 / op_MEMWB_is_alui_wr $end
$var wire 1 0 op_MEMWB_is_alur $end
$var wire 5 1 rt_MEMWB [4:0] $end
$var wire 5 2 rt_IFID [4:0] $end
$var wire 5 3 rt_IDEX [4:0] $end
$var wire 5 4 rt_EXMEM [4:0] $end
$var wire 5 5 rs_MEMWB [4:0] $end
$var wire 5 6 rs_IFID [4:0] $end
$var wire 5 7 rs_IDEX [4:0] $end
$var wire 5 8 rs_EXMEM [4:0] $end
$var wire 5 9 rd_MEMWB [4:0] $end
$var wire 5 : rd_IFID [4:0] $end
$var wire 5 ; rd_IDEX [4:0] $end
$var wire 5 < rd_EXMEM [4:0] $end
$var wire 5 = op_MEMWB [4:0] $end
$var wire 5 > op_IFID [4:0] $end
$var wire 5 ? op_IDEX [4:0] $end
$var wire 5 @ op_EXMEM [4:0] $end
$var wire 32 A instrMEMWB [31:0] $end
$var wire 32 B instrIFID [31:0] $end
$var wire 32 C instrIDEX [31:0] $end
$var wire 32 D instrEXMEM [31:0] $end
$var wire 6 E funct_MEMWB [5:0] $end
$var wire 6 F funct_IFID [5:0] $end
$var wire 6 G funct_IDEX [5:0] $end
$var wire 6 H funct_EXMEM [5:0] $end
$var wire 32 I aluMEMWB_Data [31:0] $end
$var wire 32 J aluEXMEM_Data [31:0] $end
$var wire 32 K MEMWB_MemData [31:0] $end
$var wire 32 L EXMEM_Data2Mem [31:0] $end
$var reg 1 M alu0 $end
$var reg 1 N alu1 $end
$var reg 32 O aluD0 [31:0] $end
$var reg 32 P aluD1 [31:0] $end
$var reg 1 Q calc_branch $end
$var reg 1 R exmem $end
$var reg 32 S exmemD [31:0] $end
$var reg 1 T jmp0 $end
$var reg 32 U jmp0D [31:0] $end
$var reg 1 V jmp1 $end
$var reg 32 W jmp1D [31:0] $end
$var reg 32 X memMemD [31:0] $end
$var reg 1 Y mem_mem $end
$var reg 1 Z stall $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xZ
xY
bx X
b10 W
1V
b10 U
1T
bx S
xR
xQ
bx P
bx O
xN
xM
b110 L
b1000 K
b10 J
b100 I
b1 H
b1 G
b1 F
b1 E
b100000000101010000011111000001 D
b11111000001 C
b11110101101010000011111000001 B
b11111000001 A
b1000 @
b0 ?
b111 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b10101 6
b0 5
b10101 4
b0 3
b10101 2
b0 1
00
1/
0.
0-
0,
0+
0*
0)
0(
0'
1&
1%
0$
0#
0"
0!
$end
#2
0T
b0 6
b11100000101010000011111000001 B
#4
0V
b0 2
b11100000000000000011111000001 B
#6
1!
b100000 H
b100000000101010000011111100000 D
#8
