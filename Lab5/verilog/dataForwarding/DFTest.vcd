$date
	Fri Jun 03 18:57:11 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module df_tb $end
$scope module dut $end
$var wire 1 ! EXMEM_is_alur $end
$var wire 1 " IDEX_is_alur $end
$var wire 1 # IFID_is_alur $end
$var wire 1 $ MEMWB_is_alur $end
$var wire 1 % op_EXMEM_is_alui_rd $end
$var wire 1 & op_EXMEM_is_alui_wr $end
$var wire 1 ' op_IDEX_is_alui_rd $end
$var wire 1 ( op_IDEX_is_alui_wr $end
$var wire 1 ) op_IFID_is_alui_rd $end
$var wire 1 * op_IFID_is_alui_wr $end
$var wire 1 + op_MEMWB_is_alui_rd $end
$var wire 1 , op_MEMWB_is_alui_wr $end
$var wire 5 - rt_MEMWB [4:0] $end
$var wire 5 . rt_IFID [4:0] $end
$var wire 5 / rt_IDEX [4:0] $end
$var wire 5 0 rt_EXMEM [4:0] $end
$var wire 5 1 rs_MEMWB [4:0] $end
$var wire 5 2 rs_IFID [4:0] $end
$var wire 5 3 rs_IDEX [4:0] $end
$var wire 5 4 rs_EXMEM [4:0] $end
$var wire 5 5 rd_MEMWB [4:0] $end
$var wire 5 6 rd_IFID [4:0] $end
$var wire 5 7 rd_IDEX [4:0] $end
$var wire 5 8 rd_EXMEM [4:0] $end
$var wire 6 9 op_MEMWB [5:0] $end
$var wire 6 : op_IFID [5:0] $end
$var wire 6 ; op_IDEX [5:0] $end
$var wire 6 < op_EXMEM [5:0] $end
$var wire 32 = instrMEMWB [31:0] $end
$var wire 32 > instrIFID [31:0] $end
$var wire 32 ? instrIDEX [31:0] $end
$var wire 32 @ instrEXMEM [31:0] $end
$var wire 6 A funct_MEMWB [5:0] $end
$var wire 6 B funct_IFID [5:0] $end
$var wire 6 C funct_IDEX [5:0] $end
$var wire 6 D funct_EXMEM [5:0] $end
$var wire 32 E aluMEMWB_Data [31:0] $end
$var wire 32 F aluEXMEM_Data [31:0] $end
$var wire 32 G MEMWB_MemData [31:0] $end
$var wire 32 H EXMEM_Data2Mem [31:0] $end
$var reg 1 I alu0 $end
$var reg 1 J alu1 $end
$var reg 32 K aluD0 [31:0] $end
$var reg 32 L aluD1 [31:0] $end
$var reg 1 M exmem $end
$var reg 32 N exmemD [31:0] $end
$var reg 1 O flush_ifid $end
$var reg 1 P jmp0 $end
$var reg 32 Q jmp0D [31:0] $end
$var reg 1 R jmp1 $end
$var reg 32 S jmp1D [31:0] $end
$var reg 32 T memMemD [31:0] $end
$var reg 1 U mem_mem $end
$var reg 1 V stall_idex $end
$var reg 1 W stall_ifid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xW
xV
0U
bx T
bx S
0R
bx Q
0P
1O
bx N
xM
bx L
bx K
xJ
xI
bx H
bx G
bx F
bx E
b1 D
b1 C
b1 B
b1 A
bx00000000000000011111000001 @
b11111000001 ?
b11111000001 >
b11111000001 =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
0,
0+
0*
0)
0(
0'
x&
x%
0$
0#
0"
0!
$end
#5
b1000 T
b1000 G
b110 H
b100 E
b10 F
#10
1%
b10 S
b10 Q
1R
1P
1&
0O
b10101 2
b10101 .
b10101 0
b1000 <
b111 :
b100000000101010000011111000001 @
b11110101101010000011111000001 >
#12
0P
b0 2
b11100000101010000011111000001 >
#14
0R
b0 .
b11100000000000000011111000001 >
#16
1!
0%
0&
b10101 8
b100000 D
b0 <
b101011010111111100000 @
#18
1R
b10101 .
b11100000101010000011111000001 >
#19
1P
b10101 2
b11110101101010000011111000001 >
#20
